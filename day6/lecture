горутина запускается как независимая задача
главная горутина начинает свое выполнение, продолжает и заканчивает выпонение
в конце она завершает и остальные горутины
проблема в отсутсвии синхронизации
нам нужно каким-то образом гарантировать, ч то пока одна функция не завершится, не нанется другая
для этого можно использовать WaitGroup
WaitGroup - счетчик
Add - добавление счетчика
Wait - некий барьер. когда все горутины сделали Done, главная горутина сможет продолжаться
Done - сброс счетчика

семафор примитивная реализация
state int = 1

func wait(){
    for state == 0 {}
    state--
}

func post(){
    state++
}

a++ - критическая секция, её нам необходимо защитить
но проблема в state, могут одновременно несколько горутин менять состояние state
чтобы реализовать семафор, должна быть атомарность функци state()
сами семафор реализовать не можем
обычно в реальной жизни мы не делаем постоянного ожидания
busy waiting
это плохо, потому что этот процесс на 100% загружает наш процессор, пока проверяет state

отличие семафоров от мьютексов
1) в семафоре целое число (то количество потоков, которое будем пускать в критическую секцию)
   в mutex bool - пустить или нет в критическую секцию
2) у мьютекса есть owner.
   у семафора кто угодно может сделать post
   у мьютекса может отпустить только тот же поток, который захватил

Любая синхронизация снижает производительность


RWProblem (read/write)
необходимо из нескольких потоков получить доступ к ресурсу надежным и эфективным способом
разделение потоков на читателей и писателей
если мы хотим читать, то мы можем читать параллельно
если мы хотим записывать, то нужно понимать, что мы можем ресурс испортить
запись с чтением/записью не совместимы
для писателей должны сделать эксклюзивную блокировку
для читателей - shared блокировка

